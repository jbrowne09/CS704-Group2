rotaryController(  
   	
   	//Plant to Controller
   	input signal bottlePos2, bottlePos3, bottlePos4, bottlePos5, aligned;
   	
   	//Main to Controller
   	input signal rotaryEnable;
   	
   	//From ConveyorController
   	input signal NbottlePos1, Nmotor;
   	
   	//To ConveyorController
   	output signal NbottlePos5;
   	
   	//Controller to Plant
   	output signal rotate, CbottlePos1, Cmotor;
	)
->{ 	

	//Rotary Control
	//Considers multiple bottles but completely ignores filler/capper finish signals (NbottleFilled & NbottleCapped)
	{
		while(true){
			abort(NbottlePos1 || bottlePos2 || bottlePos3 || bottlePos4) {
				halt;
			}
			
			//await(rotaryEnable);
			//abort(!rotaryEnable) {
				abort(!aligned){
					halt;
				}
				abort(aligned) {
					sustain rotate;
				}
			//}
		}
	}
	||
	
	//signals to/from conveyorController and main
	{ while(true) { present (NbottlePos1) {emit CbottlePos1;} pause;}}
	||
	{ while(true) { present (Nmotor) {emit Cmotor;} pause;}}
	||
	{ while(true) { present (bottlePos5) {emit NbottlePos5;} pause;}}
}