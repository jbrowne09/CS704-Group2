rotaryPlant(
		input signal rotate;
		output signal aligned, bottlePos5, capPos1; //To controller
		output signal alignedS, bottlePos5S, bottlePos2S, capPos1S, rotateS, bottlePos1S; //To viz
		)
->{
	//Still need to output bottlePos5 and capPos1 somewhere
	
	{//Rotation
		while(true){
			await(rotate);
			emit rotateS;
		}
	}
	||
	{
		while(true) {
			//emit bottlePos1S;
		
			present(bottlePos1S){
				await(rotate);
				emit bottlePos2S;
			}
			else {
				sustain bottlePos1S;
			}
			pause;
		}
	}
	||
	{//To viz
		{while(true) {present(aligned) {emit alignedS;} pause;}}
		||
		{while(true) {present(bottlePos5) {emit bottlePos5S;} pause;}}
		||
		{while(true) {present(capPos1) {emit capPos1S;} pause;}}
		//||
		//{while(true) {present(bottlePos2) {emit bottlePos2S;} pause;}}
	}
	
	
	//Possible replacement below here:
	//Early version, ONE bottle at a time only
	//Needs additional bottlePosS signals for visualiser
	{
		await(!tick);
		await(tick);
		
		abort(rotate) {
			sustain bottlePos1;
		}
		
		await(!tick);
		await(tick);
		
		abort(rotate) {
			sustain bottlePos2;
		}
		
		await(!tick);
		await(tick);
		
		abort(rotate) {
			sustain bottlePos3;
		}
		
		await(!tick);
		await(tick);
		
		abort(rotate) {
			sustain bottlePos4;
		}
		
		await(!tick);
		await(tick);
		
		abort(rotate) {
			sustain bottlePos5;
		}
	}
	||
	{//To Viz
		{ while(true) { present (bottlePos1) {emit bottlePos1S;} pause;}}
		||
		{ while(true) { present (bottlePos2) {emit bottlePos2S;} pause;}}
		||
		{ while(true) { present (bottlePos3) {emit bottlePos3S;} pause;}}
		||
		{ while(true) { present (bottlePos4) {emit bottlePos4S;} pause;}}
		||
		{ while(true) { present (bottlePos5) {emit bottlePos5S;} pause;}}
	}
}